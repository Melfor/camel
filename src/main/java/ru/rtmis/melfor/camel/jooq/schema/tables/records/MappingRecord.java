/*
 * This file is generated by jOOQ.
 */
package ru.rtmis.melfor.camel.jooq.schema.tables.records;


import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;

import ru.rtmis.melfor.camel.jooq.schema.tables.Mapping;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MappingRecord extends TableRecordImpl<MappingRecord> implements Record4<Integer, String, String, String> {

    private static final long serialVersionUID = 461979331;

    /**
     * Setter for <code>public.mapping.system_id</code>. Id системы
     */
    public MappingRecord setSystemId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.mapping.system_id</code>. Id системы
     */
    public Integer getSystemId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.mapping.id</code>. Наименование поля id
     */
    public MappingRecord setId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.mapping.id</code>. Наименование поля id
     */
    public String getId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.mapping.first</code>. Наименование поля first
     */
    public MappingRecord setFirst(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.mapping.first</code>. Наименование поля first
     */
    public String getFirst() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.mapping.second</code>. Наименование поля second
     */
    public MappingRecord setSecond(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.mapping.second</code>. Наименование поля second
     */
    public String getSecond() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Mapping.MAPPING.SYSTEM_ID;
    }

    @Override
    public Field<String> field2() {
        return Mapping.MAPPING.ID;
    }

    @Override
    public Field<String> field3() {
        return Mapping.MAPPING.FIRST;
    }

    @Override
    public Field<String> field4() {
        return Mapping.MAPPING.SECOND;
    }

    @Override
    public Integer component1() {
        return getSystemId();
    }

    @Override
    public String component2() {
        return getId();
    }

    @Override
    public String component3() {
        return getFirst();
    }

    @Override
    public String component4() {
        return getSecond();
    }

    @Override
    public Integer value1() {
        return getSystemId();
    }

    @Override
    public String value2() {
        return getId();
    }

    @Override
    public String value3() {
        return getFirst();
    }

    @Override
    public String value4() {
        return getSecond();
    }

    @Override
    public MappingRecord value1(Integer value) {
        setSystemId(value);
        return this;
    }

    @Override
    public MappingRecord value2(String value) {
        setId(value);
        return this;
    }

    @Override
    public MappingRecord value3(String value) {
        setFirst(value);
        return this;
    }

    @Override
    public MappingRecord value4(String value) {
        setSecond(value);
        return this;
    }

    @Override
    public MappingRecord values(Integer value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MappingRecord
     */
    public MappingRecord() {
        super(Mapping.MAPPING);
    }

    /**
     * Create a detached, initialised MappingRecord
     */
    public MappingRecord(Integer systemId, String id, String first, String second) {
        super(Mapping.MAPPING);

        set(0, systemId);
        set(1, id);
        set(2, first);
        set(3, second);
    }
}
