/*
 * This file is generated by jOOQ.
 */
package ru.rtmis.melfor.camel.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rtmis.melfor.camel.jooq.schema.Keys;
import ru.rtmis.melfor.camel.jooq.schema.Public;
import ru.rtmis.melfor.camel.jooq.schema.tables.records.MappingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapping extends TableImpl<MappingRecord> {

    private static final long serialVersionUID = -1462999661;

    /**
     * The reference instance of <code>public.mapping</code>
     */
    public static final Mapping MAPPING = new Mapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappingRecord> getRecordType() {
        return MappingRecord.class;
    }

    /**
     * The column <code>public.mapping.system_id</code>. Id системы
     */
    public final TableField<MappingRecord, Integer> SYSTEM_ID = createField(DSL.name("system_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Id системы");

    /**
     * The column <code>public.mapping.id</code>. Наименование поля id
     */
    public final TableField<MappingRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "Наименование поля id");

    /**
     * The column <code>public.mapping.first</code>. Наименование поля first
     */
    public final TableField<MappingRecord, String> FIRST = createField(DSL.name("first"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "Наименование поля first");

    /**
     * The column <code>public.mapping.second</code>. Наименование поля second
     */
    public final TableField<MappingRecord, String> SECOND = createField(DSL.name("second"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "Наименование поля second");

    /**
     * Create a <code>public.mapping</code> table reference
     */
    public Mapping() {
        this(DSL.name("mapping"), null);
    }

    /**
     * Create an aliased <code>public.mapping</code> table reference
     */
    public Mapping(String alias) {
        this(DSL.name(alias), MAPPING);
    }

    /**
     * Create an aliased <code>public.mapping</code> table reference
     */
    public Mapping(Name alias) {
        this(alias, MAPPING);
    }

    private Mapping(Name alias, Table<MappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mapping(Name alias, Table<MappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Mapping(Table<O> child, ForeignKey<O, MappingRecord> key) {
        super(child, key, MAPPING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<MappingRecord>> getKeys() {
        return Arrays.<UniqueKey<MappingRecord>>asList(Keys.MAPPING_SYSTEM_ID_KEY);
    }

    @Override
    public Mapping as(String alias) {
        return new Mapping(DSL.name(alias), this);
    }

    @Override
    public Mapping as(Name alias) {
        return new Mapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapping rename(String name) {
        return new Mapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapping rename(Name name) {
        return new Mapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
